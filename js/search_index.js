var search_data = {"index":{"searchIndex":["object","statictracing","configuration","modes","signals","platform","provider","providermissingerror","tracepoint","invalidargtype","invalidargumenterror","tracepointmissingerror","tracer","base","concerns","latency","helpers","latency","stack","tracers","invalidtracererror","unknown","add()","add_tracepoint()","add_tracer()","clean()","configure()","darwin?()","destroy()","disable()","disable!()","disable!()","disable!()","disable!()","enable()","enable!()","enable!()","enable!()","enable!()","enabled?()","enabled?()","enabled?()","fetch()","fetch()","fire()","included()","instance()","issue_disabled_tracepoints_warning()","latest_running_container_id()","linux?()","mode=()","new()","new()","new()","new()","new()","nsec()","path()","provider()","register()","register()","signal=()","supported_platform?()","toggle_tracing!()","underscore()"],"longSearchIndex":["object","statictracing","statictracing::configuration","statictracing::configuration::modes","statictracing::configuration::modes::signals","statictracing::platform","statictracing::provider","statictracing::provider::providermissingerror","statictracing::tracepoint","statictracing::tracepoint::invalidargtype","statictracing::tracepoint::invalidargumenterror","statictracing::tracepoint::tracepointmissingerror","statictracing::tracer","statictracing::tracer::base","statictracing::tracer::concerns","statictracing::tracer::concerns::latency","statictracing::tracer::helpers","statictracing::tracer::latency","statictracing::tracer::stack","statictracing::tracers","statictracing::tracers::invalidtracererror","unknown","statictracing::tracers::add()","statictracing::provider#add_tracepoint()","statictracing::configuration#add_tracer()","statictracing::tracers::clean()","statictracing#configure()","statictracing::platform#darwin?()","statictracing::provider#destroy()","statictracing::provider#disable()","statictracing#disable!()","statictracing::provider::disable!()","statictracing::tracer::base::disable!()","statictracing::tracers::disable!()","statictracing::provider#enable()","statictracing#enable!()","statictracing::provider::enable!()","statictracing::tracer::base::enable!()","statictracing::tracers::enable!()","statictracing#enabled?()","statictracing::provider#enabled?()","statictracing::tracepoint#enabled?()","statictracing::provider::fetch()","statictracing::tracepoint::fetch()","statictracing::tracepoint#fire()","statictracing::tracer::concerns::latency::included()","statictracing::configuration::instance()","statictracing#issue_disabled_tracepoints_warning()","object#latest_running_container_id()","statictracing::platform#linux?()","statictracing::configuration#mode=()","statictracing::configuration::new()","statictracing::provider::new()","statictracing::tracepoint::new()","statictracing::tracepoint::invalidargumenterror::new()","statictracing::tracers::invalidtracererror::new()","statictracing#nsec()","statictracing::provider#path()","statictracing::tracepoint#provider()","statictracing::provider::register()","statictracing::tracer::base::register()","statictracing::configuration#signal=()","statictracing::platform#supported_platform?()","statictracing#toggle_tracing!()","statictracing::tracer::helpers#underscore()"],"info":[["Object","","Object.html","",""],["StaticTracing","","StaticTracing.html","","<p>FIXME: Including StaticTracing should cause every method in a module or\nclass to be registered Implement …\n"],["StaticTracing::Configuration","","StaticTracing/Configuration.html","",""],["StaticTracing::Configuration::Modes","","StaticTracing/Configuration/Modes.html","","<p>Modes of operation for tracers\n"],["StaticTracing::Configuration::Modes::SIGNALS","","StaticTracing/Configuration/Modes/SIGNALS.html","",""],["StaticTracing::Platform","","StaticTracing/Platform.html","","<p>Platform detection for ruby-static-tracing\n"],["StaticTracing::Provider","","StaticTracing/Provider.html","","<p>A wrapper for a USDT tracepoint provider This corresponds to a namespace of\ntracepoints By convention, …\n"],["StaticTracing::Provider::ProviderMissingError","","StaticTracing/Provider/ProviderMissingError.html","","<p>Provider couldn&#39;t be found in collection\n"],["StaticTracing::Tracepoint","","StaticTracing/Tracepoint.html","",""],["StaticTracing::Tracepoint::InvalidArgType","","StaticTracing/Tracepoint/InvalidArgType.html","",""],["StaticTracing::Tracepoint::InvalidArgumentError","","StaticTracing/Tracepoint/InvalidArgumentError.html","",""],["StaticTracing::Tracepoint::TracepointMissingError","","StaticTracing/Tracepoint/TracepointMissingError.html","",""],["StaticTracing::Tracer","","StaticTracing/Tracer.html","",""],["StaticTracing::Tracer::Base","","StaticTracing/Tracer/Base.html","",""],["StaticTracing::Tracer::Concerns","","StaticTracing/Tracer/Concerns.html","",""],["StaticTracing::Tracer::Concerns::Latency","","StaticTracing/Tracer/Concerns/Latency.html","","<p>Including this module will cause the target to have latency tracers added\naround every method\n"],["StaticTracing::Tracer::Helpers","","StaticTracing/Tracer/Helpers.html","",""],["StaticTracing::Tracer::Latency","","StaticTracing/Tracer/Latency.html","",""],["StaticTracing::Tracer::Stack","","StaticTracing/Tracer/Stack.html","","<p>A stack tracer gets the stack trace at point when the tracer is executed\n"],["StaticTracing::Tracers","","StaticTracing/Tracers.html","","<p>Tracers are a layer of abstraction above tracepoints. They are opinionated\nand contextual ways of applying …\n"],["StaticTracing::Tracers::InvalidTracerError","","StaticTracing/Tracers/InvalidTracerError.html","","<p>Error for an invalid tracer\n"],["unknown","","unknown.html","",""],["add","StaticTracing::Tracers","StaticTracing/Tracers.html#method-c-add","(tracer)",""],["add_tracepoint","StaticTracing::Provider","StaticTracing/Provider.html#method-i-add_tracepoint","(tracepoint, *args)","<p>Adds a new tracepoint to this provider FIXME - should this be a dictionary,\nor are duplicate names allowed? …\n"],["add_tracer","StaticTracing::Configuration","StaticTracing/Configuration.html#method-i-add_tracer","(tracer)","<p>Adds a new tracer globally\n"],["clean","StaticTracing::Tracers","StaticTracing/Tracers.html#method-c-clean","()","<p>Clears all tracers\n"],["configure","StaticTracing","StaticTracing.html#method-i-configure","()","<p>Block to configure static tracing, eg:\n\n<pre>StaticTracing.configure do |config|\n  config.add_tracer(StaticTracing::Tracer::Latency) ...</pre>\n"],["darwin?","StaticTracing::Platform","StaticTracing/Platform.html#method-i-darwin-3F","()","<p>Returns true if platform is darwin\n"],["destroy","StaticTracing::Provider","StaticTracing/Provider.html#method-i-destroy","()","<p>Completely removes the provider\n"],["disable","StaticTracing::Provider","StaticTracing/Provider.html#method-i-disable","()","<p>Disables the provider, unloading it from memory\n"],["disable!","StaticTracing","StaticTracing.html#method-i-disable-21","()","<p>Overwrite the definition of all functions to their original definition, no\nlonger wrapping them\n"],["disable!","StaticTracing::Provider","StaticTracing/Provider.html#method-c-disable-21","()","<p>Forcefully disables all providers, unloading them from memory\n"],["disable!","StaticTracing::Tracer::Base","StaticTracing/Tracer/Base.html#method-c-disable-21","()",""],["disable!","StaticTracing::Tracers","StaticTracing/Tracers.html#method-c-disable-21","()","<p>Disables each tracer, replacing the method definition\n"],["enable","StaticTracing::Provider","StaticTracing/Provider.html#method-i-enable","()","<p>Enable the provider, loading it into memory\n"],["enable!","StaticTracing","StaticTracing.html#method-i-enable-21","()","<p>Overwrite the definition of all functions that are enabled with a wrapped\nversion that has tracing enabled …\n"],["enable!","StaticTracing::Provider","StaticTracing/Provider.html#method-c-enable-21","()","<p>Enables each provider, ensuring it is loaded into memeory\n"],["enable!","StaticTracing::Tracer::Base","StaticTracing/Tracer/Base.html#method-c-enable-21","()",""],["enable!","StaticTracing::Tracers","StaticTracing/Tracers.html#method-c-enable-21","()","<p>Enables each tracer, overriding original method definition with traced one\n"],["enabled?","StaticTracing","StaticTracing.html#method-i-enabled-3F","()","<p>Should indicate if static tracing is enabled - a global constant\n"],["enabled?","StaticTracing::Provider","StaticTracing/Provider.html#method-i-enabled-3F","()","<p>Returns true if the provider is enabled, meaning it is loaded into memory\n"],["enabled?","StaticTracing::Tracepoint","StaticTracing/Tracepoint.html#method-i-enabled-3F","()","<p>Returns true if a tracepoint is currently attached to, indicating we should\nfire it\n"],["fetch","StaticTracing::Provider","StaticTracing/Provider.html#method-c-fetch","(namespace)","<p>Gets a provider instance by name\n"],["fetch","StaticTracing::Tracepoint","StaticTracing/Tracepoint.html#method-c-fetch","(provider, name)","<p>Gets a trace instance by provider name and name\n"],["fire","StaticTracing::Tracepoint","StaticTracing/Tracepoint.html#method-i-fire","(*values)","<p>Fire a tracepoint, sending the data off to be received by a tracing program\nlike dtrace\n"],["included","StaticTracing::Tracer::Concerns::Latency","StaticTracing/Tracer/Concerns/Latency.html#method-c-included","(base)",""],["instance","StaticTracing::Configuration","StaticTracing/Configuration.html#method-c-instance","()",""],["issue_disabled_tracepoints_warning","StaticTracing","StaticTracing.html#method-i-issue_disabled_tracepoints_warning","()","<p>This will print a message indicating that tracepoints are disabled on this\nplatform\n"],["latest_running_container_id","Object","Object.html#method-i-latest_running_container_id","()",""],["linux?","StaticTracing::Platform","StaticTracing/Platform.html#method-i-linux-3F","()","<p>Returns true if platform is linux\n"],["mode=","StaticTracing::Configuration","StaticTracing/Configuration.html#method-i-mode-3D","(new_mode)","<p>Sets the mode [ON, OFF, SIGNAL] Default is SIGNAL\n"],["new","StaticTracing::Configuration","StaticTracing/Configuration.html#method-c-new","()","<p>A new configuration instance\n"],["new","StaticTracing::Provider","StaticTracing/Provider.html#method-c-new","(namespace)","<p>ALWAYS use register, never call .new dilectly\n"],["new","StaticTracing::Tracepoint","StaticTracing/Tracepoint.html#method-c-new","(provider_name, name, *args)","<p>Creates a new tracepoint. If a provider by the name specified doesn&#39;t\nexist already, one will be …\n"],["new","StaticTracing::Tracepoint::InvalidArgumentError","StaticTracing/Tracepoint/InvalidArgumentError.html#method-c-new","(argument, expected_type)",""],["new","StaticTracing::Tracers::InvalidTracerError","StaticTracing/Tracers/InvalidTracerError.html#method-c-new","()",""],["nsec","StaticTracing","StaticTracing.html#method-i-nsec","()","<p>Efficiently return the current monotonic clocktime. Wraps libc\nclock_gettime The overhead of this is …\n"],["path","StaticTracing::Provider","StaticTracing/Provider.html#method-i-path","()","<p>Only supported on systems (linux) where backed by file\n"],["provider","StaticTracing::Tracepoint","StaticTracing/Tracepoint.html#method-i-provider","()","<p>The provider this tracepoint is defined on\n"],["register","StaticTracing::Provider","StaticTracing/Provider.html#method-c-register","(namespace)","<p>Gets a provider by name or creates one if not exists\n"],["register","StaticTracing::Tracer::Base","StaticTracing/Tracer/Base.html#method-c-register","(klass, *method_names, provider: nil)",""],["signal=","StaticTracing::Configuration","StaticTracing/Configuration.html#method-i-signal-3D","(new_signal)","<p>Sets the SIGNAL to listen to, Default is SIGPROF\n"],["supported_platform?","StaticTracing::Platform","StaticTracing/Platform.html#method-i-supported_platform-3F","()","<p>Returns true if platform is known to be supported\n"],["toggle_tracing!","StaticTracing","StaticTracing.html#method-i-toggle_tracing-21","()","<p>Toggles between enabling and disabling tracepoints declared through tracers\n"],["underscore","StaticTracing::Tracer::Helpers","StaticTracing/Tracer/Helpers.html#method-i-underscore","(class_name)",""]]}}